name: Deploy AWS

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout do projeto
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Build com Maven (gera o JAR)
        run: ./mvnw -DskipTests package

      - name: Login no Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build e Push da imagem
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          # publica com a tag do commit e também "latest" (útil para testes manuais)
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/pessoas-ci:${{ github.sha }}
            ${{ secrets.DOCKERHUB_USERNAME }}/pessoas-ci:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Deploy remoto via SSH (EC2)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST_TEST }}
          username: ubuntu
          key: ${{ secrets.KEY_TEST }}
          script_stop: true
          script: |
            set -e

            # 1) garantir rede "rede"
            docker network create rede || true

            # 2) garantir MySQL rodando (ajuste se seu container tiver outro nome)
            docker ps --format '{{.Names}}' | grep -q '^mysql$' || {
              echo "ERRO: container 'mysql' não está rodando na EC2. Suba o MySQL antes do deploy."
              exit 1
            }

            # 3) parar/remover app antiga
            docker rm -f stocks-app 2>/dev/null || true

            # 4) baixar imagem nova
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/pessoas-ci:${{ github.sha }}

            # 5) subir container na rede 'rede' (porta 8081 no host -> 8080 no container)
            docker run -d \
              --name stocks-app \
              --network=rede \
              -p 8081:8080 \
              ${{ secrets.DOCKERHUB_USERNAME }}/pessoas-ci:${{ github.sha }}

            # 6) logs iniciais para conferência no Actions
            sleep 3
            docker ps
            echo "----- LOGS stocks-app (últimas 80 linhas) -----"
            docker logs --tail=80 stocks-app || true
            echo "✅ Deploy concluído."

